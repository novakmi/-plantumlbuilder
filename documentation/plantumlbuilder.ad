plantumlbuilder
===============
:Author:    Michal Nov√°k
:Email:     it.novakmi@gmail.com
:URL:       https://bitbucket.org/novakmi/yangbuilder
:Date:      2015-06-06
:Revision:  0.0.1

This  document describes how to use Groovy builder for the PlantUML language.
The document is written in http://www.methods.co.nz/asciidoc/[AsciiDoc].

== Version history

[options="header"]
|======
| Version     | Notes                                   | Date        | Author
| {revision}  | Initial Asciidoc version, updated       | {date}      | {author}
|======

== References

[bibliography]
* [[[groovy]]] http://www.groovy-lang.org/[Groovy - a dynamic language for JAVA platform]
* [[[nodebuilder]]] https://bitbucket.org/novakmi/nodebuilder[Library for creation of groovy builders with plugin support]
* [[[UML]]] http://www.uml.org/ - Unified Modeling Language
* [[[PlantUML]]]  http://plantuml.sourceforge.net - component that allows to quickly write UML diagrams.
* [[[plantumlbuilder]]] https://bitbucket.org/novakmi/plantumlbuilder[Groovy builder for PlantUML language]

== Terminology

* *UML* a Data Modeling Language
* *Groovy builder:*  http://en.wikipedia.org/wiki/Design_Patterns[builder design pattern] implemented in the <<groovy>>,
  with support for DSL (Domain Specific Language), see http://groovy-lang.org/dsls.html#_builders[groovy builders]

== License

The <<plantumlbuilder>> is free software, licensed under http://en.wikipedia.org/wiki/MIT_License[MIT License].

----
include::../LICENSE[]
----

== Introduction

NOTE: _This document is still work in progress. Please take a look at the examples in the `templates\scripts` directory
       and at the tests in the `tests\groovy` directory to see usage of all <<plantumlbuilder>> features._

The <<platnumlbuilder>> represents implementation of <<groovy>> builder for <<PlantUML>> language. 

Using groovy builders is a way to create tree like structures in source code. PlantUML language does not fully resemble tree like structure,
in spite of this, a groovy builder can simplify UML modeling in PlantUML language (especially sequence diagrams).

The main benefits of using builder are:

* reuse - in UML diagram and between UML diagrams
* parametrization
* customization of diagram language 
* direct creation of UML images from groovy script
* taking advantage of an IDE (e.g. Intellij Idea) when creating UML diagram - text formatting, auto completion

=== Dependencies

To start using <<plantumlbuilder>> you need to have <<PlantUML>> jar file (`plantuml.jar`) and <<plantumlbuilder>> jar file (`plantumlbuilder-x.x.x.jar`) or sources.
For editing it is recommended to use [[http://www.jetbrains.com/idea/| Intellij Idea IDE]] (e.g. free community edition) to create UML in <<groovy>>.

=== First Plantumlbuilder diagrams

The basic <<plantumlbuilder>> command is `plant` element. See following groovy script:

[source, java]
----
// create new builder
def builder = new PlantUmlBuilder()
// plantuml element is a root element of PlantUML
builder.plantuml {
            plant('A->B') // plant  only puts text to the output
            plant('activate B')
            plant('B->C')
            plant('activate C')
            plant('C-->B')
            plant('deactivate C')
            plant('A-->B')
            plant('deactivate B')
}

println builder.getText() // get PlantUML text
println ''
println 'Without @startuml/@enduml'
println builder.getText(plainPlantUml: true)  // get PlantUML text without @startuml and @enduml

// use plantUML to create png file from plantuml text
SourceStringReader s = new SourceStringReader(builder.getText())
FileOutputStream file = new FileOutputStream('./example1.png')
s.generateImage(file)
file.close()
----

This produces following <<PlantUML>> output (and image file):

[source, perl]
----
@startuml
A->B
activate B
B->C
activate C
C-->B
deactivate C
A-->B
deactivate B
@enduml

Without @startuml/@enduml
A->B
activate B
B->C
activate C
C-->B
deactivate C
A-->B
deactivate B
----


As you can see, it is possible to generate either PlantUML text enclosed in `@startuml`/`@enduml` (`builder.getText()`) or text not being enclosed in `@startuml`/`@enduml` (`builder.getText(plainPlantUml: true)`). The latter is useful for example if you want to add image name to the <<PlantUML>> text.

Next script (only <<plantumlbuilder> part shown) produces same diagram picture, but the output is differently indented. 

NOTE: Note you can use `builder.reset()` to clear already existing content of the builder.

Another example with reuse (closure).

[source, java]
----
builder.reset()
final def A = 'A'
final def B = 'B'
final def C = 'C'

builder.plantuml() {
        // example of block reuse
        def interact = {a, b ->
                plant "$a->$b"
                plant "activate $b"
                plant "$b-->$a"
                plant "deactivate $b"
        }
        title 'Plantuml builder basic template - simple sequence diagram'
        plant 'participant "A node" as A'
        plant "participant B"
        plant "participant C"
        plant "$A->$B"
        plant "activate $B", {
                interact(B, C) //reuse
        }
        plant "$B-->$A"
        plant "deactivate $B"
        interact(C, B) //reuse
}
----

Following PlantUML text is created:

[source, perl]
----
@startuml
title Plantuml builder basic template - simple sequence diagram
participant "A node" as A
participant B
participant C
A->B
activate B
  B->C
  activate C
  C-->B
  deactivate C
B-->A
deactivate B
C->B
activate B
B-->C
deactivate B
@enduml
----

NOTE: You can see the indenting of the text follows parent/child relationship of builder elements. 
This is useful (for more complex diagrams) to increase readability.

NOTE: The syntax follows `groovy` builder syntax, and one can also use bracket, e.g.: `plant("participant C")` or `plant("activate $B") {...`

=== Advanced diagram example

The possibility to use programming language to create diagrams is not the only advantage. With Plugins, one can made 
custom syntax for specific diagrams or domain. Together with the <<plantumlbuilder>> there comes plugins for different
types of UML diagrams. 

Following example demonstrates how <<plantumlbuilder>> can be used together with `PlatnUmlBuilderSeqPlugin` for sequence diagrams
parts of sequence diagram.

[source, java]
----
def u1 = 'User1'
def m1 = 'MobileA'
def m2 = 'MobileB'
def u2 = 'User2'

builder.plantuml() {
        title 'Plantuml builder seq plugin template example with activation colors and boxes'

        box {
                actor u1
        }
        box "Mobile", {
                participant m1
        }
        box("Mobile", color: "#LightBlue") {
                participant m2
        }
        box color: "#green", {
                actor u2
        }

        msgAd u1, to: m1, text: "Start Call", returnText: "Call finished", {
                msg m1, to: m2, text: "Ring", noReturn: true
                msgAd u2, to: m2, activate: "#FFBBBB", text: "PickUp", returnText: "HangUp", {
                        msgAd m2, to: m1, activate: "#yellow", text: "Talk"
                }
        }
}
----

Following PlantUML text is created 

[source, perl]
----
@startuml
title Plantuml builder seq plugin template example with activation colors and boxes
box
  actor User1
end box
box "Mobile"
  participant MobileA
end box
box "Mobile" #LightBlue
  participant MobileB
end box
box #green
  actor User2
end box
User1 -> MobileA : Start Call
activate MobileA
  MobileA -> MobileB : Ring
  User2 -> MobileB : PickUp
  activate MobileB #FFBBBB
    MobileB -> MobileA : Talk
    activate MobileA #yellow
    MobileA --> MobileB
    deactivate MobileA
  MobileB --> User2 : HangUp
  deactivate MobileB
MobileA --> User1 : Call finished
deactivate MobileA
@enduml
----

== <<plantumlbuilder>> language reference

=== Base reference

Following keywords can be used by the <<plantumlbuilder>>.

==== `plantuml`

Represents <<plantumlbuilder>> root node mark (not present in PlantUML text). It is possible to pass text to be placed after `@startuml` (e.g. image name).

Examples:

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML

a|
[source,java]
-----
builder.plantuml {
...
}

----- | *N/A*
a|
[source,java]
-----
builder.plantuml("img\myuml.png") {
...
}

----- | *N/A*
|=====


==== `plant`

Text is directly copied as line to the PlantUML text.
With this keyword,any PlantUML keyword can be entered by the builder.

Example(s):

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML

a|
[source,java]
-----
plant("autonumber")
----- a| 
----
autonumber
----
|=====

==== `title`, `header` and `footer`

Example(s):

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML

a|
[source,java]
-----
title("My diagram")
----- a| 
----
title My diagram
----
a|
[source,java]
-----
footer('''My footer
        multiline''')
----- a| 
----
footer
   My footer
   multiline
end footer
----
|=====

NOTE: Use groovy multiline string or `\n` to create multiline elements. Multiline elements are automatically
      trimmed and indented.

NOTE: Use `\\n` in the groovy string to format one line element on the several lines

==== `legend`

Attributes: 
`pos` (optional) - `left`, `center` and `right`

Example(s):

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML

a|
[source,java]
-----
legend("My legend")
----- a| 
----
legend 
   My legend
end legend   
----
a|
[source,java]
-----
legend('''My legend
        multiline''', pos: "right")
----- a| 
----
legend right
   My legend
   multiline
end legend
----
|=====

NOTE: Use groovy multiline string or `\n` to create multiline legends. Multiline legends are automatically
      trimmed and indented.

NOTE: Use `\\n` in the groovy string to format one line legend on the several lines


==== `newpage`

Example(s):

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML

a|
[source,java]
-----
newpage()
----- a| 
----
newpage
----
a|
[source,java]
-----
newpage "Page break"
----- a| 
----
newpage Page break
----
a|
[source,java]
-----
newpage "Page break\\nmore lines"
----- a| 
----
newpage Page break\nmore lines
----
|=====

==== `note`

Attribute: `as` (optional), `pos` (optional)

Example(s):

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML

a|
[source,java]
-----
note("MyNote")
----- a| 
----
note MyNote
----
a|
[source,java]
-----
note("My note", as: "MyNote")
----- a| 
----
note My note as MyNote
----
a|
[source,java]
-----
note("MyNote", pos: "right")
----- a| 
----
note right : MyNote
----
a|
[source,java]
-----
 note ('''a note
            can also be defined
         on several lines  ''', pos: "left of A", color: "blue")
----- a| 
----
note left of A #blue
  a note
  can also be defined
  on several lines
end note
----
|=====

NOTE: Use groovy multiline string or `\n` to create multiline notes. Multiline notes are automatically
      trimmed and indented.

NOTE: Use `\\n` in the groovy string to format one line note on the several lines

== Plugins

=== Plantumlbuilder sequence plugin

See `PlantUmlBuilderSeqPluginTest` for more information and examples.

Following keywords are supported (added) by the sequence plugin.

==== `participant`, `actor`, `boundary`, `control`, `entity` and `database`

Attributes: 
`as` (optional)
`color` (optional)
`stereotype` (optional)

Example(s):

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML

a|
[source,java]
-----
participant("MyParticipant")
----- a| 
----
participant MyParticipant
----
a|
[source,java]
-----
participant("My Participant", as: "MyParticipant")
----- a| 
----
participant My Participant as MyParticipant
----
a|
[source,java]
-----
participant("MyParticipant", color: "#red")
----- a| 
----
participant MyParticipant #red
----
a|
[source,java]
-----
actor("MyActor")
----- a| 
----
actor MyActor
----
a|
[source,java]
-----
actor("My Actor", as: "MyActor", stereotype: "person")
----- a| 
----
actor "My Actor" as MyActor <<person>>
----
|=====

NOTE: In similar way use `boundary`, `control`, `entity` and `database`
NOTE: If value contains space character (e.g. `"My actor"`), it is automatically surrounded by the quotes `"`, unless there are surrounding quotes already
       present in the value (e.g. `'"My actor"'` or `"\"My actor\""`)

==== `create`

Attributes: 
`type` (optional) - one of `participant`, `actor`, `boundary`, `control`, `entity` and `database` (default is `participant`)
`as` (optional)
`color` (optional)
`stereotype` (optional)

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML

a|
[source,java]
-----
create "MyParticipant"
----- a| 
----
create MyParticipant
----
a|
[source,java]
-----
create "My Participant", as: "MyParticipant"
----- a| 
----
create "My Participant" as MyParticipant
----
a|
[source,java]
-----
create "MyParticipant", type: "control", color: "#red")
----- a| 
----
create control MyParticipant #red
----
a|
[source,java]
-----
crreate "My Actor", as: "MyActor", stereotype: "person", type: "actor"
----- a| 
----
create actor "My Actor" as MyActor <<person>>
----
|=====
NOTE: If value contains space character (e.g. `"My actor"`), it is automatically surrounded by the quotes `"`, unless there are surrounding quotes already
       present in the value (e.g. `'"My actor"'` or `"\"My actor\""`)

==== `msg`

Sequence diagram message.

Attributes (all optional):

* `to` (_string_ - existing `actor`, `participant`, etc.)
* `noReturn` (_boolean_)
* `text` (_string_)
* `returnText` (_string_)
* `type` (_string_)
* `returnType` (_string_)
* `activate` (_boolean_ or _string_ - activation color)
* `close`  (_string_ - "activate" or "destroy")

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML| Note

a|
[source,java]
-----
msg("A")
----- a| 
----
A -> A
----
a|
Create a message with _self_ arrow.

a|
[source,java]
-----
msg("A", to: "B") {
...
}
----- a| 
----
A -> B 
...
B --> A
----
a|
Create message from `A` to `B` with automatic return arrow from `B` to `A`

a|
[source,java]
-----
msg("A", to: "B", noReturn:true)
----- a| 
----
A -> B
----
a|
Create message from `A` to `B` without return arrow

a|
[source,java]
-----
msg("A", to: "B", text:"call B") {
...
}
----- a| 
----
A -> B : call B
...
B --> A
----
a|
Create message from `A` to `B` with arrow text

a|
[source,java]
-----
msg("A", to: "B", type: "-->") {
...
}
----- a| 
----
A --> B 
...
B --> A
----
a|
Create message from `A` to `B` with different arrow type (same as return arrow)

a|
[source,java]
-----
msg("A", to: "B", activate: "true") {
...
}
----- a| 
----
A -> B : call B
activate B
...
B --> A
----
a|
Create message from `A` to `B` with activation of the second participant

a|
[source,java]
-----
msg("A", to: "B", text:"call B", close: "deactivate") {
...
}
----- 
[source,java]
-----
msg("A", to: "B", text:"call B", close: "destroy") {
...
}
----- a| 
----
A -> B : call B
activate B
...
B --> A
deactivate B
----

----
A -> B : call B
activate B
...
B --> A
destroy B
----

a|
Create message from `A` to `B` with activation (automatic) nad deactivation or destroy of the second participant

a|
[source,java]
-----
msg("A", to: "B", returnText: "finished") {
...
}
----- 
a| 
----
A -> B 
...
B --> A : finished
----

a|
Create message from `A` to `B` with return arrow text

a|
[source,java]
-----
msg("A", to: "B", returnType: "->") {
...
}
----- 
a| 
----
A -> B : call B
...
B -> A
----

a|
Create message from `A` to `B` with different return arrow type

|=====

NOTE: Incoming and Outcoming messages are also supported with use of `[` and `]`. For example `msg("[", to: "A")` or `msg("]", to: "A", text: "o2")`


==== msgAd

This keyword has same meaning as the `msg` keyword. In addition, it automatically adds `close` attribute with the `deactivate` value
(can be overwritten with the `destroy` value).


[source,java]
-----
msgAd("A", to: "B") {
...
}
-----

is same as:

[source,java]
-----
msg("A", to: "B", close: "deactivate") {
...
}
-----

`destroy` can be specified by adding `close` attribute (in this case `msg` and `msgAd` are same)


[source,java]
-----
msgAd("A", to: "B", close: "destroy") {
...
}
-----

is same as:

[source,java]
-----
msg("A", to: "B", close: "destroy") {
...
}
-----

The activation color can be specified with `activate` attribute:

[source,java]
-----
msgAd("A", to: "B", activate: "#Green") {
...
}
-----

is same as:

[source,java]
-----
msg("A", to: "B", activate: "#Green", close: "deactivate") {
...
}
-----

==== `activate`

Attribute: `close` (optional) - specifies how to close the activation block, value can be `deactivate` or `destroy`

Activate participant. With attribute `close` it is possible to specify `activate - deactivate` or `activate - destroy` block.

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML

a|
[source,java]
-----
activate("A")
----- a| 
----
activate A
----
a|
[source,java]
-----
activate("A", close: "deactivate") {
...
}
----- a| 
----
activate A
...
deactivate A
----
a|
[source,java]
-----
activate("A", close: "destroy") {
...
}
----- a| 
----
activate A
...
destroy A
----
|=====

==== `deactivate` and `destroy`

Deactivate or destroy the participant.

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML

a|
[source,java]
-----
deactivate("A")
----- a| 
----
deactivate A
----
a|
[source,java]
-----
destroy("A")
----- a| 
----
destroy A
----
|=====

==== `autonumber`

Specify arrow numbering

value: numbering start (optional)

Attributes:

`step`: numbering step
`format`: numbering format

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML

a|
[source,java]
-----
autonumber()
----- a| 
----
autonumber
----
a|
[source,java]
-----
autonumber 15
----- a| 
----
autonumber 15
----
a|
[source,java]
-----
autonumber 40 15
----- a| 
----
autonumber 40 15
----
a|
[source,java]
-----
autonumber format: "<b>[000]" 
----- a| 
----
autonumber "<b>[000]"
----
a|
[source,java]
-----
autonumber 40, step: 10, format: "<font color=red><b>Message 0"
----- a| 
----
autonumber 40 10 "<font color=red><b>Message 0"
----
|=====


==== `divider`

Create divider of given name

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML

a|
[source,java]
-----
divider("separate")
----- a| 
----
== separate ==
----
|=====

==== `delay`

Create delay of given name

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML

a|
[source,java]
-----
delay("wait")
----- a| 
----
...wait...
----
|=====

==== `group`

Create `group` of given name

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML

a|
[source,java]
-----
group("MyGroup") {
...
}
-----  a| 
----
group MyGroup
...
end
----
|=====

==== `opt`

Create `opt` frame for given condition

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML
a|
[source,java]
-----
opt("condition") {
...
}
----- a| 
----
opt condition
...
end
----
|=====

==== `alt` and `else`

Create `alt` frame for given condition with `else` 

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML
a|
[source,java]
-----
alt("condition1") {
...
  else("condition2")
...
}
----- a| 
----
alt condition1
...
else condition2
...
end
----
|=====

NOTE: `else` in the `groovy` code is inside the `alt` block

==== `loop`

Create `loop` frame for given loop condition

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML
a|
[source,java]
-----
loop("condition") {
...
}
----- a| 
----
loop condition
...
end
----
|=====

==== `par`

Create `par` frame

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML
a|
[source,java]
-----
par("in parallel") {
...
}
----- a| 
----
par in parallel
...
end
----
|=====

==== `break`

Create `break` frame

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML
a|
[source,java]
-----
"break"("MyBreak") {
...
}
----- a| 
----
break MyBreak
...
end
----
|=====

NOTE: As `break` is <<groovy>> keyword, in the builder it has to be specified as string

==== `critical`

Create `critical` frame

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML
a|
[source,java]
-----
critical("MyCritical") {
...
}
----- a| 
----
break MyCritical
...
end
----
|=====

==== `ref`

Create `ref` frame

Attribute: `over` - list of _participants_ (mandatory)

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML
a|
[source,java]
-----
ref("see diagram X", over: ["A", "B"])
----- a| 
----
ref over A,B: see diagram X
----
|=====

NOTE: Currently only one line `ref` is supported. Multiline `ref` has to be created with the `plant` keyword.

==== `box`

Encompass participants in the box

Attribute: `color` - the color of the `box`

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML
a|
[source,java]
-----
box("User") {
    actor("user")
}
----- a| 
----
box User
   actor user
end box
----

a|
[source,java]
-----
box("User", color: "#LightBlue") {
    actor("user")
}
----- a| 
----
box User #LightBlue
   actor user
end box
----
|=====

==== `hnote` and `rnote`

Hexagon and rectangle note for sequence diagrams.

Attribute:
`pos` (mandatory)
`color`

Example(s):

[options="header"]
|=====
|<<plantumlbuilder>> | PlantUML

a|
[source,java]
-----
hnote("MyHNote", pos: "over A")
----- a| 
----
hnote over A : MyHNote
----
a|
[source,java]
-----
rnote("MyRNote", pos: "over A")
----- a| 
----
rnote over A : MyRNote
----
a|
[source,java]
-----
hnote("See\\nthis diagram", pos: "over A")
----- a| 
----
rnote over A : See\nthis diagram
----
a|
[source,java]
-----
hnote("See\\nthis diagram", pos: "over A", color: "green")
----- a| 
----
rnote over A #green : See\nthis diagram
----
|=====

NOTE: `hnote` nad `rnote` support multiline handling just like regular `note`

==== Plantumlbuilder class plugin

See `PlantUmlBuilderClassPluginTest` for more information and examples.

TODO

==== Plantumlbuilder component plugin

See `PlantUmlBuilderCompPluginTest` for more information and examples.

TODO

== Interface

Plantumlbuilder groovy interface

The interface consists of two parts

* the Plantumlbuilder interface
* the Plugin interface allowing extension of Plantumlbuilder language

TODO:: images/plantbuilderinterface.png

=== PlantUmlBuilder interface

[source, java]
----
/**
 * Get PlantUML text build by the builder
 * @param params map with optional name params.
 *         Currently supported 'plainPlantUml' - do not add '@startuml/@enduml' to the returned PlantUML text
 *         getText()
 *         getText(plainPlantUml: true)
 * @return build text
 */
public String getText(params)
----

[source, java]
----
/**
 * Reset root element of the builder.
 * Use this method to start building PlantUML text from the beginning.
 */
public void reset()
----


[source, java]
----
/**
 * Add a plugin listener.
 */
void addPlantUmlBuilderPluginListener(PlantUmlBuilderPluginListener listener)
----

[source, java]
----
/**
 * Remove the plugin listener.
 */
void removePlantUmlBuilderPluginListener(PlantUmlBuilderPluginListener listener)
----
TODO:: See {{{cz.atlas.bubbles.it.test.plantumlbuilder.PlantUmlBuilderTest}}} for examples of the usage.

=== PlantUmlBuilderPluginListener interface

[source, java]
----
/**
 * Builder node
 */
private class Node {
    def name = ''   // name of node (e.g. plant('text, at:'attrib') - name is plant)
    def parent = null // parent node (or null if this is root node)
    def attributes = [:] //attributes (e.g. plant('text, at:'attrib') - attributes.at == 'attrib')
    def value = null //value of node (e.g. plant('text, at:'attrib') - value is text)
    def children = [] //children nodes
}
----

[source, java]
----
//Listener interface  for node or attributes
enum PluginListenerResult {
    NOT_ACCEPTED, // node not accepted by the  plugin
    PROCESSED_STOP, // node processed by the plugin, do not process node with other plugins
    PROCESSED_CONTINUE, // node processed by plugin, process node with other plugins as well
    FAILED, // node processing failed
}
----
[source, java]
----
interface PlantUmlBuilderPluginListener {
    /**
     * Process given node in plugin before and after plantuml builder
     * @param node builder node to process (
     * @param out IndentPrinter to print PlantUML text
     * @param postProcess if false, it is pre processing time, if true, it is post processing time
     * @return result
     * $see PluginListenerResult, Node
     */
    PluginListenerResult process(final Node node, IndentPrinter out, boolean postProcess)
}
----

== Plantuml Maven repository ===

The <<plantumlbuilder>> has been accepted by JCenter and is available in the JCenter Maven repository.
It can be automatically used with Groovy `@Grab` or in `gradle`. There is no need to download and
maintain `jar` files.

